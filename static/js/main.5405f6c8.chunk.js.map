{"version":3,"sources":["FirebaseInfo.js","slice.js","store.js","ProfilePage.jsx","ProfileContainer.jsx","NewPostPage.jsx","NewPostContainer.jsx","PostPage.jsx","PostContainer.jsx","PostsPage.jsx","PostsContainer.jsx","HomeContainer.jsx","AuthPage.jsx","AuthContainer.jsx","ServiceRouter.jsx","Service.jsx","index.jsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","authService","auth","dbService","firestore","storeageService","storage","reducers","checkUserState","state","userInf","payload","isLoggedIn","userEmail","email","userUid","uid","userDisplayName","displayName","userPhotoUrl","photoURL","changeLoginField","name","value","loginFields","logoutUserId","showAuthError","LoginErrorMessage","setPostsToService","posts","changeNewPostText","newPostText","attachNewPostImage","newPostImage","attachNewPostImageUrl","newPostImageUrl","editPost","editPostText","resetEditPost","editProfileDisplayName","profileDisplayName","editProfileInformation","profileInformation","createSlice","initialState","password","basicProfileUrl","actions","reducer","store","configureStore","ProfilepPage","onChange","editState","onEdit","onSave","onClick","src","width","height","type","event","target","ProfileContainer","useState","changeEditState","useSelector","history","useHistory","dispatch","useDispatch","handleEdit","prev","getState","a","onAuthStateChanged","user","updateProfile","signOut","push","NewPostPage","onAttach","onSubmit","placeholder","maxLength","accept","theFile","files","fileReader","FileReader","onload","finishedEvent","result","currentTarget","readAsDataURL","NewPostContainer","fileRef","ref","child","uuidv4","putString","response","getDownloadURL","collection","add","POST_TEXT","POST_IMAGE_URL","CREATE_DATE","Date","now","CREATE_UID","PostPage","postId","postText","postImageUrl","checkId","onUpdate","handleDelete","id","url","window","confirm","handleChange","buttonForWriter","PostContainer","createUid","postObjId","postObjUrl","doc","delete","refFromURL","update","PostsPage","map","post","key","POST_ID","PostsContainer","HomeContainer","useEffect","onSnapshot","snapshot","POSTS","docs","data","AuthPage","fields","AuthContainer","signInWithEmailAndPassword","message","createUserWithEmailAndPassword","ServiceRouter","exact","path","component","Service","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5405f6c8.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n  // apiKey: process.env.REACT_APP_API_KEY,\n  // authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  // databaseURL: process.env.REACT_APP_DATABASE_URL,\n  // projectId: process.env.REACT_APP_PROJECT_ID,\n  // storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  // messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  // appId: process.env.REACT_APP_APP_ID,\n  apiKey: 'AIzaSyCVyQKVyLh7yo3-szC3n_PSr2I0kSbY1us',\n  authDomain: 'posteat-d658b.firebaseapp.com',\n  databaseURL: 'https://posteat-d658b.firebaseio.com',\n  projectId: 'posteat-d658b',\n  storageBucket: 'posteat-d658b.appspot.com',\n  messagingSenderId: '1056443819818',\n  appId: '1:1056443819818:web:00adb92039c09aaa69a053',\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const authService = firebase.auth();\n\nexport const dbService = firebase.firestore();\n\nexport const storeageService = firebase.storage();\n","/* eslint-disable no-console */\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { authService, dbService, storeageService } from './FirebaseInfo';\n\nconst initialState = {\n  loginFields: {\n    email: '',\n    password: '',\n  },\n  LoginErrorMessage: '',\n  isLoggedIn: {\n    userEmail: '',\n    userUid: '',\n    userDisplayName: '',\n    userPhotoUrl: '',\n  },\n\n  posts: [],\n\n  newPostText: '',\n  newPostImage: '',\n  newPostImageUrl: '',\n  editPostText: '',\n\n  basicProfileUrl: '',\n};\n\nconst reducers = {\n  checkUserState(state, { payload: userInf }) {\n    return {\n      ...state,\n      isLoggedIn: {\n        ...state.isLoggedIn,\n        userEmail: userInf.email,\n        userUid: userInf.uid,\n        userDisplayName: userInf.displayName,\n        userPhotoUrl: userInf.photoURL,\n      },\n    };\n  },\n  changeLoginField(state, { payload: { name, value } }) {\n    return {\n      ...state,\n      loginFields: {\n        ...state.loginFields,\n        [name]: value,\n      },\n    };\n  },\n  logoutUserId(state) {\n    return {\n      ...state,\n      isLoggedIn: '',\n    };\n  },\n  showAuthError(state, { payload: LoginErrorMessage }) {\n    return {\n      ...state,\n      LoginErrorMessage,\n    };\n  },\n  setPostsToService(state, { payload: posts }) {\n    return {\n      ...state,\n      posts,\n    };\n  },\n  changeNewPostText(state, { payload: newPostText }) {\n    return {\n      ...state,\n      newPostText,\n    };\n  },\n  attachNewPostImage(state, { payload: newPostImage }) {\n    return {\n      ...state,\n      newPostImage,\n    };\n  },\n  attachNewPostImageUrl(state, { payload: newPostImageUrl }) {\n    return {\n      ...state,\n      newPostImageUrl,\n    };\n  },\n  editPost(state, { payload: editPostText }) {\n    return {\n      ...state,\n      editPostText,\n    };\n  },\n  resetEditPost(state) {\n    return {\n      ...state,\n      editPostText: '',\n    };\n  },\n  editProfileDisplayName(state, { payload: profileDisplayName }) {\n    return {\n      ...state,\n      isLoggedIn: {\n        ...state.isLoggedIn,\n        userDisplayName: profileDisplayName,\n      },\n    };\n  },\n  editProfileInformation(state, { payload: profileInformation }) {\n    return {\n      ...state,\n      isLoggedIn: {\n        ...state.isLoggedIn,\n        userDisplayName: profileInformation.userDisplayName,\n        userPhotoUrl: profileInformation.userPhotoUrl,\n      },\n    };\n  },\n};\n\nconst { actions, reducer } = createSlice({\n  name: 'application',\n  initialState,\n  reducers,\n});\n\nexport const {\n  checkUserState,\n  changeLoginField,\n  logoutUserId,\n  showAuthError,\n  changeNewPostText,\n  setPostsToService,\n  editPost,\n  resetEditPost,\n  attachNewPostImage,\n  attachNewPostImageUrl,\n  editProfileDisplayName,\n  editProfileInformation,\n} = actions;\n\nexport function createUserId() {\n  return async (dispatch, getState) => {\n    const { loginFields: { email, password } } = getState();\n\n    try {\n      await authService.createUserWithEmailAndPassword(email, password);\n    } catch (error) {\n      dispatch(showAuthError(error.message));\n    }\n  };\n}\n\nexport function loginUserId() {\n  return async (dispatch, getState) => {\n    const { loginFields: { email, password } } = getState();\n\n    try {\n      await authService.signInWithEmailAndPassword(email, password);\n    } catch (error) {\n      dispatch(showAuthError(error.message));\n    }\n  };\n}\n\nexport function getPostsFromFirebase() {\n  return async (dispatch) => {\n    await dbService.collection('PostEat').onSnapshot((snapshot) => {\n      const POSTS = snapshot.docs.map((doc) => ({\n        POST_ID: doc.id,\n        ...doc.data(),\n      }));\n      dispatch(setPostsToService(POSTS));\n    });\n  };\n}\n\nexport function postOnFirebase() {\n  return async (dispatch, getState) => {\n    const { newPostText, isLoggedIn: { userUid }, newPostImageUrl } = getState();\n    await dbService.collection('PostEat').add({\n      POST_TEXT: newPostText,\n      POST_IMAGE_URL: newPostImageUrl,\n      CREATE_DATE: Date.now(),\n      CREATE_UID: userUid,\n    });\n    dispatch(changeNewPostText(''));\n  };\n}\n\nexport function uploadImageOnFirebase() {\n  return async (dispatch, getState) => {\n    const { isLoggedIn: { userUid }, newPostImage } = getState();\n\n    const fileRef = storeageService.ref().child(`${userUid}/${uuidv4()}`);\n    const response = await fileRef.putString(newPostImage, 'data_url');\n    const newPostImageUrl = await response.ref.getDownloadURL();\n    dispatch(attachNewPostImageUrl(newPostImageUrl));\n  };\n}\n\nexport function updatePostOnFirebase(postObjId) {\n  return async (dispatch, getState) => {\n    const { editPostText } = getState();\n\n    await dbService.doc(`PostEat/${postObjId}`).update({\n      POST_TEXT: editPostText,\n    });\n    dispatch(resetEditPost());\n  };\n}\n\nexport function deletePostOnFirebase(postObjId, postObjUrl) {\n  return async (dispatch) => {\n    await dbService.doc(`PostEat/${postObjId}`).delete();\n    await storeageService.refFromURL(postObjUrl).delete();\n    dispatch(attachNewPostImage(''));\n  };\n}\n\nexport function changeUserDisplayName() {\n  return async (dispatch, getState) => {\n    const { isLoggedIn: { userDisplayName } } = getState();\n\n    authService.onAuthStateChanged(async (user) => {\n      await user.updateProfile({\n        displayName: userDisplayName,\n      });\n    });\n  };\n}\n\nexport default reducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport reducer from './slice';\n\nconst store = configureStore({ reducer });\n\nexport default store;\n","/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable react/prop-types */\nimport React from 'react';\n\nexport default function ProfilepPage({\n  isLoggedIn, onChange, editState, onEdit, onSave, onClick,\n}) {\n  const { userEmail, userDisplayName, userPhotoUrl } = isLoggedIn;\n\n  function handleChange(event) {\n    const { target: { value } } = event;\n    onChange(value);\n  }\n\n  return (\n    <>\n      <h4>{userEmail}</h4>\n      {userDisplayName}\n      <h5>\n        {userDisplayName ? <>{userDisplayName}</> : <> Hey, No Name </> }\n      </h5>\n      {userPhotoUrl\n        ? <img src={userPhotoUrl} width=\"100px\" height=\"100px\" />\n        : <img width=\"100px\" height=\"100px\" /> }\n      {editState\n          && (\n          <>\n            <input\n                type=\"text\"\n                value={userDisplayName}\n                onChange={handleChange}\n            />\n            <button\n              type=\"button\"\n              onClick={onSave}\n            >\n              수정\n            </button>\n          </>\n          )}\n      <button\n        type=\"button\"\n        onClick={onEdit}\n      >\n        EDIT\n      </button>\n      <button\n        type=\"button\"\n        onClick={onClick}\n      >\n        LOGOUT\n      </button>\n    </>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { authService } from './FirebaseInfo';\n\nimport {\n  editProfileDisplayName,\n  changeUserDisplayName,\n  logoutUserId,\n} from './slice';\n\nimport ProfilepPage from './ProfilePage';\n\nexport default function ProfileContainer() {\n  const [editState, changeEditState] = useState(false);\n\n  const { isLoggedIn } = useSelector((state) => ({\n    isLoggedIn: state.isLoggedIn,\n  }));\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  function handleChange(value) {\n    dispatch(editProfileDisplayName(value));\n  }\n\n  function handleEdit() {\n    changeEditState((prev) => !prev);\n  }\n\n  function handleSave() {\n    handleEdit();\n    dispatch(changeUserDisplayName());\n  }\n\n  function handleClick() {\n    authService.signOut();\n    dispatch(logoutUserId());\n    history.push('/');\n  }\n\n  return (\n    <>\n      <ProfilepPage\n        isLoggedIn={isLoggedIn}\n        onChange={handleChange}\n        editState={editState}\n        onEdit={handleEdit}\n        onSave={handleSave}\n        onClick={handleClick}\n      />\n    </>\n  );\n}\n","/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable react/prop-types */\nimport React from 'react';\n\nexport default function NewPostPage({\n  newPostText, onChange, newPostImage, onAttach, onSubmit,\n}) {\n  function handleChange(event) {\n    const { target: { value } } = event;\n    onChange(value);\n  }\n\n  function onFileChange(event) {\n    const { target: { files } } = event;\n\n    const theFile = files[0];\n\n    const fileReader = new FileReader();\n    fileReader.onload = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      onAttach(result);\n    };\n\n    fileReader.readAsDataURL(theFile);\n  }\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        name=\"newPostText\"\n        value={newPostText}\n        onChange={handleChange}\n        placeholder=\"Hello? World!\"\n        maxLength={120}\n      />\n      <>\n        {newPostImage\n          && (\n          <>\n            <img\n              src={newPostImage}\n              width=\"100px\"\n              height=\"100px\"\n            />\n            <button\n              type=\"button\"\n              onClick={() => onAttach('')}\n            >\n              clear\n            </button>\n          </>\n          ) }\n      </>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n      />\n      <button\n        type=\"button\"\n        onClick={onSubmit}\n      >\n        POST EAT!\n      </button>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  changeNewPostText,\n  postOnFirebase,\n  attachNewPostImage,\n  uploadImageOnFirebase,\n} from './slice';\n\nimport NewPostPage from './NewPostPage';\n\nexport default function NewPostContainer() {\n  const { newPostText, newPostImage } = useSelector((state) => ({\n    newPostText: state.newPostText,\n    newPostImage: state.newPostImage,\n  }));\n\n  const dispatch = useDispatch();\n\n  function handleChange(value) {\n    dispatch(changeNewPostText(value));\n  }\n\n  function handleAttach(value) {\n    dispatch(attachNewPostImage(value));\n\n    if (value) {\n      dispatch(uploadImageOnFirebase());\n    }\n  }\n\n  function handleSubmit() {\n    dispatch(postOnFirebase());\n  }\n\n  return (\n    <NewPostPage\n      newPostText={newPostText}\n      onChange={handleChange}\n      newPostImage={newPostImage}\n      onAttach={handleAttach}\n      onSubmit={handleSubmit}\n    />\n  );\n}\n","/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable react/jsx-wrap-multilines */\n/* eslint-disable no-alert */\n/* eslint-disable react/prop-types */\nimport React from 'react';\n\nexport default function PostPage({\n  postId, postText, postImageUrl, checkId,\n  onClick, editState, onEdit, editPostText, onChange, onUpdate,\n}) {\n  function handleDelete(id, url) {\n    const message = window.confirm('Do you want to delete this posteat?');\n\n    if (message) {\n      onClick(id, url);\n    }\n  }\n\n  function handleChange(event) {\n    const { target: { value } } = event;\n    onChange(value);\n  }\n\n  function onClickEdit() {\n    return (\n      <>\n        <input\n          type=\"text\"\n          value={editPostText}\n          onChange={handleChange}\n        />\n        <button type=\"button\" onClick={onEdit}>취소</button>\n        <button type=\"button\" onClick={() => onUpdate(postId)}>수정</button>\n      </>\n    );\n  }\n\n  function buttonForWriter() {\n    return (\n      <>\n        {checkId\n          && <>\n            <button type=\"button\" onClick={() => handleDelete(postId, postImageUrl)}>\n              Delete\n            </button>\n            <button type=\"button\" onClick={onEdit}>\n              Edit\n            </button>\n             </>}\n      </>\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  function myPostEatData() {\n    return (\n      <>\n        {checkId\n        && <>\n          {postText}\n          {buttonForWriter()}\n           </>}\n      </>\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  function allPostEatData() {\n    return (\n      <>\n        <img src={postImageUrl} width=\"150px\" height=\"150px\" />\n        {postText}\n        {buttonForWriter()}\n      </>\n    );\n  }\n\n  return (\n    <div>\n      { editState\n        ? <>\n          {onClickEdit()}\n          </>\n        : <>\n          {allPostEatData()}\n          </>}\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  deletePostOnFirebase,\n  editPost,\n  updatePostOnFirebase,\n} from './slice';\n\nimport PostPage from './PostPage';\n\nexport default function PostContainer({\n  postId, createUid, postText, postImageUrl,\n}) {\n  const [editState, onEdit] = useState(false);\n\n  const { userUid, editPostText } = useSelector((state) => ({\n    userUid: state.isLoggedIn.userUid,\n    editPostText: state.editPostText,\n  }));\n\n  const dispatch = useDispatch();\n\n  function handleDelete(id, url) {\n    dispatch(deletePostOnFirebase(id, url));\n  }\n\n  function handleChange(value) {\n    dispatch(editPost(value));\n  }\n\n  function handleEdit() {\n    onEdit((prev) => !prev);\n  }\n\n  function handleUpdate(value) {\n    dispatch(updatePostOnFirebase(value));\n    handleEdit();\n  }\n\n  return (\n    <PostPage\n      postId={postId}\n      postText={postText}\n      postImageUrl={postImageUrl}\n      checkId={createUid === userUid}\n      onClick={handleDelete}\n      editState={editState}\n      onEdit={handleEdit}\n      editPostText={editPostText}\n      onChange={handleChange}\n      onUpdate={handleUpdate}\n    />\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nimport PostContainer from './PostContainer';\n\nexport default function PostsPage({ posts }) {\n  return (\n    <>\n      {posts.map((post) => (\n        <PostContainer\n          key={post.POST_ID}\n          postId={post.POST_ID}\n          createUid={post.CREATE_UID}\n          postText={post.POST_TEXT}\n          postImageUrl={post.POST_IMAGE_URL}\n        />\n      ))}\n    </>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport PostsPage from './PostsPage';\n\nexport default function PostsContainer() {\n  const { posts } = useSelector((state) => ({\n    posts: state.posts,\n  }));\n\n  return (\n    <PostsPage posts={posts} />\n  );\n}\n","import React, { useEffect } from 'react';\n\nimport { useDispatch } from 'react-redux';\n\nimport ProfileContainer from './ProfileContainer';\nimport NewPostContainer from './NewPostContainer';\nimport PostsContainer from './PostsContainer';\n\nimport {\n  getPostsFromFirebase,\n} from './slice';\n\nexport default function HomeContainer() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getPostsFromFirebase());\n  }, [dispatch]);\n\n  return (\n    <>\n      <NewPostContainer />\n      <PostsContainer />\n      <ProfileContainer />\n    </>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nexport default function AuthPage({\n  fields, onChange, onClick, onSubmit, LoginErrorMessage,\n}) {\n  const { email, password } = fields;\n\n  function handleChange(event) {\n    const { target: { name, value } } = event;\n    onChange({ name, value });\n  }\n\n  return (\n    <>\n      <>\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={handleChange}\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={handleChange}\n        />\n      </>\n      <>\n        <button\n          type=\"button\"\n          onClick={onClick}\n        >\n          LOGIN\n        </button>\n        <button\n          type=\"button\"\n          onClick={onSubmit}\n        >\n          SIGNIN\n        </button>\n        {LoginErrorMessage}\n      </>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  changeLoginField,\n  createUserId,\n  loginUserId,\n} from './slice';\n\nimport AuthPage from './AuthPage';\n\nexport default function AuthContainer() {\n  const { loginFields, LoginErrorMessage } = useSelector((state) => ({\n    loginFields: state.loginFields,\n    LoginErrorMessage: state.LoginErrorMessage,\n  }));\n\n  const dispatch = useDispatch();\n\n  function handleChange({ name, value }) {\n    dispatch(changeLoginField({ name, value }));\n  }\n\n  function handleSubmit() {\n    dispatch(createUserId());\n  }\n\n  function handleClick() {\n    dispatch(loginUserId());\n  }\n\n  return (\n    <AuthPage\n      fields={loginFields}\n      onChange={handleChange}\n      onClick={handleClick}\n      onSubmit={handleSubmit}\n      LoginErrorMessage={LoginErrorMessage}\n    />\n  );\n}\n","import React from 'react';\n\nimport {\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport HomeContainer from './HomeContainer';\nimport AuthContainer from './AuthContainer';\n\n// eslint-disable-next-line react/prop-types\nexport default function ServiceRouter({ isLoggedIn }) {\n  return (\n    <>\n      <Switch>\n        {isLoggedIn ? (\n          <Route exact path=\"/\" component={HomeContainer} />\n        ) : <Route exact path=\"/\" component={AuthContainer} /> }\n      </Switch>\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { authService } from './FirebaseInfo';\n\nimport ServiceRouter from './ServiceRouter';\n\nimport { checkUserState } from './slice';\n\nexport default function Service() {\n  const { userEmail } = useSelector((state) => ({\n    userEmail: state.isLoggedIn.userEmail,\n  }));\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      const {\n        email, uid, displayName, photoURL,\n      } = user;\n\n      dispatch(checkUserState({\n        email, uid, displayName, photoURL,\n      }));\n    });\n  }, [dispatch]);\n\n  return (\n    <>\n      <ServiceRouter isLoggedIn={userEmail} />\n      <>\n        <footer>\n          &copy;\n          Post Eat @iamhwang\n        </footer>\n      </>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport Service from './Service';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Service />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('app'),\n);\n"],"sourceRoot":""}